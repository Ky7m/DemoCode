// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using ToDoList.API.ToDoListAPIClient.Models;

namespace ToDoList.API.ToDoListAPIClient
{
    public static partial class ToDoListExtensions
    {
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='owner'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object Delete(this IToDoList operations, string owner, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToDoList)s).DeleteAsync(owner, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='owner'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteAsync(this IToDoList operations, string owner, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var result = await operations.DeleteWithOperationResponseAsync(owner, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='owner'>
        /// Required.
        /// </param>
        public static IList<ToDoItem> Get(this IToDoList operations, string owner)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToDoList)s).GetAsync(owner);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='owner'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ToDoItem>> GetAsync(this IToDoList operations, string owner, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var result = await operations.GetWithOperationResponseAsync(owner, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='owner'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ToDoItem GetById(this IToDoList operations, string owner, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToDoList)s).GetByIdAsync(owner, id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='owner'>
        /// Required.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ToDoItem> GetByIdAsync(this IToDoList operations, string owner, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var result = await operations.GetByIdWithOperationResponseAsync(owner, id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='todo'>
        /// Required.
        /// </param>
        public static object Post(this IToDoList operations, ToDoItem todo)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToDoList)s).PostAsync(todo);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='todo'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostAsync(this IToDoList operations, ToDoItem todo, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var result = await operations.PostWithOperationResponseAsync(todo, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='todo'>
        /// Required.
        /// </param>
        public static object Put(this IToDoList operations, ToDoItem todo)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IToDoList)s).PutAsync(todo);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ToDoListAPI.IToDoList.
        /// </param>
        /// <param name='todo'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutAsync(this IToDoList operations, ToDoItem todo, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var result = await operations.PutWithOperationResponseAsync(todo, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
